#include <stdio.h>
#include <stdlib.h>

/* Definition of a singly linked list node */
typedef struct listint_t {
    int data;
    struct listint_t *next;
} listint_t;

/* Function to create a new node */
listint_t *create_node(int number) {
    listint_t *new_node = (listint_t *)malloc(sizeof(listint_t));
    if (new_node == NULL) {
        return NULL; // Failed to allocate memory
    }
    new_node->data = number;
    new_node->next = NULL;
    return new_node;
}

/* Function to insert a number into a sorted singly linked list */
listint_t *insert_node(listint_t **head, int number) {
    listint_t *new_node = create_node(number);
    if (new_node == NULL) {
        return NULL; // Failed to allocate memory for new node
    }

    listint_t *current = *head;
    listint_t *prev = NULL;

    while (current != NULL && current->data < number) {
        prev = current;
        current = current->next;
    }

    if (prev == NULL) {
        new_node->next = *head;
        *head = new_node;
    } else {
        prev->next = new_node;
        new_node->next = current;
    }

    return new_node;
}

/* Function to print the linked list */
void print_list(listint_t *head) {
    while (head != NULL) {
        printf("%d -> ", head->data);
        head = head->next;
    }
    printf("NULL\n");
}

/* Function to free the linked list */
void free_list(listint_t *head) {
    listint_t *temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

/* Example usage */
int main() {
    listint_t *head = NULL;

    insert_node(&head, 5);
    insert_node(&head, 10);
    insert_node(&head, 7);
    insert_node(&head, 3);
    insert_node(&head, 1);

    printf("Linked list: ");
    print_list(head);

    free_list(head); // Free the memory allocated for the linked list
    return 0;
}

